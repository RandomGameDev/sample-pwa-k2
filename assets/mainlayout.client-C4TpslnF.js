import{a as v}from"./with-props-DchBsm47.js";import{n as s,p as x,a as n,O as E}from"./chunk-HA7DTUK3-BUh68AE2.js";import{X as p}from"./robin-components.es-7fcra3Mt.js";import{B as g}from"./Button-CX9LRMvc.js";import{n as d}from"./index-BG4YmgkQ.js";const I=()=>{const{sampleBrand:e}=d();return s.jsx("nav",{className:p("bg-primary-500 h-[46px] pt-1 text-center text-3xl font-bold text-black"),children:s.jsx(x,{to:"/",children:e})})},O=e=>(console.log("Subscribing user with:",e),localStorage.setItem("push-subscription",JSON.stringify(e)),{success:!0}),k=e=>(console.log("Sending notification with message:",e),Notification.permission==="granted"&&(console.log("SENDING NOTIF"),new Notification("Test Notification",{body:"HEEEELLLOOO",icon:"/pwa-192x192.png",requireInteraction:!0})),{success:!0});function j(e){try{const t=e.trim(),r="=".repeat((4-t.length%4)%4),l=(t+r).replace(/-/g,"+").replace(/_/g,"/"),i=window.atob(l),u=new Uint8Array(i.length);for(let o=0;o<i.length;++o)u[o]=i.charCodeAt(o);return u}catch(t){throw console.error("Error converting VAPID key:",t),new Error("Invalid VAPID public key format")}}async function N(e={}){var t;try{if(!("serviceWorker"in navigator))throw new Error("Service Worker not supported");const r=await navigator.serviceWorker.ready,l=new MessageChannel;return console.log("REGISTRATION: ",r.active),(t=r.active)==null||t.postMessage({type:"SIMULATE_PUSH",payload:{title:e.title||"Simulated Push Notification",body:e.body||"This notification was triggered by simulating a push event",icon:e.icon||"/icons/icon-192x192.png"}},[l.port2]),console.log("Push event simulation message sent to service worker"),!0}catch(r){return console.error("Error simulating push event:",r),!1}}const P=()=>{const{configTheme:e}=d(),[t,r]=n.useState("HELLO"),[l,i]=n.useState(!1),[u,o]=n.useState(null),[L,h]=n.useState(!1),[T,m]=n.useState(!1),f=async()=>{try{const c=await(await navigator.serviceWorker.register("/sw.js",{scope:"/",updateViaCache:"none"})).pushManager.getSubscription();o(c),console.log("SUB: ",c),console.log("Service Worker registered successfully")}catch(a){console.error("Service Worker registration failed:",a)}},S=async()=>{try{const c=await(await navigator.serviceWorker.ready).pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:j("BOpVx8suNjpGBwTG1wzjf9UVtmsqIH33gcA42b9yUJm0XujYjJ2aOMbH0LVJc6bOT6xvj4CcakJI6iaGUA-Lg30")});o(c);const w=JSON.parse(JSON.stringify(c));await O(w)}catch(a){console.error("Failed to subscribe to push notifications:",a)}},y=async()=>{console.log("HELLO"),t.trim()&&u&&(console.log("HELLO323232"),await k(t),r(""))},b=async()=>{await N({title:"Simulated Push Event",body:"This notification was triggered by simulating a push event"})};return n.useEffect(()=>{"serviceWorker"in navigator&&"PushManager"in window&&(i(!0),f()),h(window.matchMedia("(display-mode: standalone)").matches),m(/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream)},[]),s.jsxs("div",{className:p("h-screen",e),children:[s.jsx(I,{}),s.jsx(g,{onClick:b,children:"Simulate Push event"}),s.jsx(g,{onClick:y,children:"Send"}),s.jsx(g,{onClick:S,children:"Subscribe"}),s.jsx("main",{children:s.jsx(E,{})})]})},B=v(P);export{B as default};
